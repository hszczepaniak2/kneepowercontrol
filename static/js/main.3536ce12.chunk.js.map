{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/NewBookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","author","id","uuidv4","filter","BookContext","createContext","BookContextProvider","children","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","NewBookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6MAEaA,EAAc,SAACC,EAAOC,GACjC,OAAQA,EAAOC,MACb,IAAK,WACH,MAAM,GAAN,mBACKF,GADL,CAEE,CACEG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAIC,iBAGV,IAAK,cACH,OAAOP,EAAMQ,QAAO,SAACJ,GAAD,OAAUA,EAAKE,KAAOL,EAAOK,MACnD,QACE,OAAON,ICbAS,EAAcC,0BAmBZC,EAjBa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAClBC,qBAAWd,EAAa,IAAI,WACpD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHD,mBACrCK,EADqC,KAC9BC,EAD8B,KAU5C,OAJAC,qBAAU,WACRN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC5C,CAACA,IAGF,cAACV,EAAYe,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,YAAtC,SACGR,KCJQc,EAVA,WAAO,IACZP,EAAUQ,qBAAWlB,GAArBU,MACR,OACE,sBAAKS,UAAU,SAAf,UACE,oDACA,oDAAuBT,EAAMU,OAA7B,kCCMSC,EAXK,SAAC,GAAqC,IAAD,IAAlC1B,KAAQD,EAA0B,EAA1BA,MAAOE,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,GACpCc,EAAaO,qBAAWlB,GAAxBW,SAER,OACE,qBAAIW,QAAS,kBAAMX,EAAS,CAAElB,KAAM,cAAeI,QAAnD,UACE,qBAAKsB,UAAU,QAAf,SAAwBzB,IACxB,qBAAKyB,UAAU,SAAf,SAAyBvB,QCWhB2B,EAhBE,WAAO,IACdb,EAAUQ,qBAAWlB,GAArBU,MAER,OAAOA,EAAMU,OACX,qBAAKD,UAAU,YAAf,SACE,6BACGT,EAAMc,KAAI,SAAC7B,GACV,OAAO,cAAC,EAAD,CAAaA,KAAMA,GAAWA,EAAKE,WAKhD,qBAAKsB,UAAU,QAAf,mDCwBWM,EArCK,WAAO,IACjBd,EAAaO,qBAAWlB,GAAxBW,SADgB,EAEEe,mBAAS,IAFX,mBAEjBhC,EAFiB,KAEViC,EAFU,OAGID,mBAAS,IAHb,mBAGjB9B,EAHiB,KAGTgC,EAHS,KAkBxB,OACE,uBAAMC,SAda,SAACC,GACpBA,EAAEC,iBACFpB,EAAS,CACPlB,KAAM,WACNE,KAAM,CACJD,QACAE,YAGJ+B,EAAS,IACTC,EAAU,KAIV,UACE,uBACEnC,KAAK,OACLuC,YAAY,aACZhB,MAAOtB,EACPuC,SAAU,SAACH,GAAD,OAAOH,EAASG,EAAEI,OAAOlB,UAErC,uBACEvB,KAAK,OACLuC,YAAY,cACZhB,MAAOpB,EACPqC,SAAU,SAACH,GAAD,OAAOF,EAAUE,EAAEI,OAAOlB,UAEtC,uBAAOvB,KAAK,SAASuB,MAAM,iBCjBlBmB,MAZf,WACE,OACE,qBAAKhB,UAAU,MAAf,SACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,UCAYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3536ce12.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\nexport const bookReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_BOOK\":\n      return [\n        ...state,\n        {\n          title: action.book.title,\n          author: action.book.author,\n          id: uuidv4(),\n        },\n      ];\n    case \"REMOVE_BOOK\":\n      return state.filter((book) => book.id !== action.id);\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer, useEffect } from \"react\";\nimport { bookReducer } from \"../reducers/bookReducer\";\n\nexport const BookContext = createContext();\n\nconst BookContextProvider = ({ children }) => {\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\n    const localData = localStorage.getItem(\"books\");\n    return localData ? JSON.parse(localData) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"books\", JSON.stringify(books));\n  }, [books]);\n\n  return (\n    <BookContext.Provider value={{ books, dispatch }}>\n      {children}\n    </BookContext.Provider>\n  );\n};\n\nexport default BookContextProvider;\n","import React, { useContext } from \"react\";\nimport { BookContext } from \"../contexts/BookContext\";\n\nconst Navbar = () => {\n  const { books } = useContext(BookContext);\n  return (\n    <div className=\"navbar\">\n      <h1>Ninja Reading List</h1>\n      <p>Currently you have {books.length} books to get through...</p>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useContext } from \"react\";\nimport { BookContext } from \"../contexts/BookContext\";\n\nconst BookDetails = ({ book: { title, author, id } }) => {\n  const { dispatch } = useContext(BookContext);\n\n  return (\n    <li onClick={() => dispatch({ type: \"REMOVE_BOOK\", id })}>\n      <div className=\"title\">{title}</div>\n      <div className=\"author\">{author}</div>\n    </li>\n  );\n};\n\nexport default BookDetails;\n","import React, { useContext } from \"react\";\nimport { BookContext } from \"../contexts/BookContext\";\nimport BookDetails from \"./BookDetails\";\n\nconst BookList = () => {\n  const { books } = useContext(BookContext);\n\n  return books.length ? (\n    <div className=\"book-list\">\n      <ul>\n        {books.map((book) => {\n          return <BookDetails book={book} key={book.id} />;\n        })}\n      </ul>\n    </div>\n  ) : (\n    <div className=\"empty\">No books to read. Hello free time :)</div>\n  );\n};\n\nexport default BookList;\n","import React, { useContext, useState } from \"react\";\nimport { BookContext } from \"../contexts/BookContext\";\n\nconst NewBookForm = () => {\n  const { dispatch } = useContext(BookContext);\n  const [title, setTitle] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch({\n      type: \"ADD_BOOK\",\n      book: {\n        title,\n        author,\n      },\n    });\n    setTitle(\"\");\n    setAuthor(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"book title\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"author name\"\n        value={author}\n        onChange={(e) => setAuthor(e.target.value)}\n      />\n      <input type=\"submit\" value=\"add book\" />\n    </form>\n  );\n};\n\nexport default NewBookForm;\n","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport BookContextProvider from \"./contexts/BookContext\";\nimport BookList from \"./components/BookList\";\nimport NewBookForm from \"./components/NewBookForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <NewBookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}